name: Sprint Release Notes

on:
  workflow_dispatch:
    inputs:
      sprint_name:
        description: 'Sprint name (e.g., Sprint5)'
        required: true

jobs:
  create-release-notes:
    runs-on: ubuntu-latest
    steps:
      # ... (previous steps remain the same)

      - name: Debug environment variables
        run: |
          echo "JIRA_API_TOKEN exists: ${{ secrets.JIRA_API_TOKEN != '' }}"
          echo "JIRA_DOMAIN exists: ${{ secrets.JIRA_DOMAIN != '' }}"
          echo "JIRA_EMAIL exists: ${{ secrets.JIRA_EMAIL != '' }}"
        env:
          JIRA_DOMAIN: ${{ secrets.JIRA_DOMAIN }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}

      - name: Generate release notes
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_DOMAIN: ${{ secrets.JIRA_DOMAIN }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          NOTION_API_TOKEN: ${{ secrets.NOTION_API_TOKEN }}
        run: |
          python generate_release_notes.py ${{ github.event.inputs.sprint_name }}
      - name: Convert JSON to Markdown
        run: |
          echo "# Release Notes for ${{ github.event.inputs.sprint_name }}" > release_notes.md
          echo "" >> release_notes.md
          echo "## What's Changed" >> release_notes.md
          if [ -f release_notes.json ]; then
            jq -r '.tickets[] | "- \(.type) - \(.key): \(.summary) (Assignee: \(.assignee))"' release_notes.json >> release_notes.md
          else
            echo "No tickets found for this sprint." >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.sprint_name }}
          release_name: Release ${{ github.event.inputs.sprint_name }}
          body_path: release_notes.md
          draft: false
          prerelease: false
